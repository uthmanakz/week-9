pipeline {
    agent any
    environment {
        AWS_ACCESS_KEY_ID = credentials ('AWS_ACCESS_KEY_ID') 
        AWS_SECRET_ACCESS_KEY = credentials ('AWS_SECRET_ACCESS_KEY')
    }

    parameters {
        choice ( choices : 'ALL\nINFRA\nAPPS' , description : "this is to set conditions for pipeline" , name : "deploy_options")
    }

    
    stages {
        
         stage ('terraform init') {
            steps {
                 script {
                echo "${params.deploy_options}"
            }
                sh '''
                cd dev
                terraform init
                '''
            }

        }

         stage ('Terraform format') {
            steps {
                sh'''
                cd dev
                terraform fmt
                '''
            }
        }
        stage ('terraform validate') {
            steps {
                sh'''
                cd dev 
                terraform validate
                '''
            }
        }

        stage ('terraform plan') {
            when {
                expression {params.deploy_options == 'INFRA' || params.deploy_options == 'ALL'}
            }
            steps {
                sh '''
                cd dev
                terraform plan
                '''
            }

        }
        stage ('terraform apply') {
            when {
                expression {params.deploy_options == 'INFRA' || params.deploy_options == 'ALL'}
            }
            steps {
                sh '''
                cd dev
                terraform apply -auto-approve
                '''
            }

        }




        stage ('SSH/Deploying NGINX') {
            when {
                expression {params.deploy_options == 'APPS' || params.deploy_options == 'ALL' }
            }
            steps {
                script {
                    sshagent (credentials : ['SSH_PRIVATE_KEY']) {
                        sh '''
                        cd dev
                        nginx_node=`terraform output | grep nginx | awk -F'"' '{print $2}'`
                        ssh -o StrictHostKeyChecking=no ec2-user@$nginx_node 'sudo yum install nginx -y && sudo service nginx start'
                        '''
                    }
                }
            }
        }

        stage ('SSH/Installing python') { 
            when {
                expression {params.deploy_options == 'APPS' || params.deploy_options == 'ALL'}
            }
            steps {
                script {
                    sshagent (credentials : ['SSH_PRIVATE_KEY']) {
                        sh '''
                        cd dev
                        python_node=`terraform output | grep python | awk -F'"' '{print $2}'`
                        ssh -o StrictHostKeyChecking=no ec2-user@$python_node 'sudo yum install -y python3'
                        cd ../code
                        scp -o StrictHostKeyChecking=no hello.py ec2-user@$python_node:/tmp/
                        '''
                    }
                }
            }
        }

        stage ('testing pytest') {
            steps {
                sshagent (credentials : ['SSH_PRIVATE_KEY']) {
                    sh'''
                    cd dev
                    python_node=`terraform output | grep python | awk -F'"' '{print $2}'`
                    ssh -o StrictHostKeyChecking=no ec2-user@$python_node 'cd /tmp/ ; sudo yum install python3-pip -y ; pip install pytest ; pytest hello.py'
                    '''
                }
            }
        }
        
          
    }
    post {
        failure {
            script {
                    withCredentials ([string (credentialsId : 'SLACK_TOKEN' , variable : 'SLACK_ID')]) {
                        sh """
                       curl -X POST \
                       -H 'Authorization: Bearer ${SLACK_ID}' \
                       -H 'Content-Type: application/json' \
                       --data '{"channel": "devops-masterclass-2024" , "text" : "Build, failed"}' \
                       https://slack.com//api/chat.postMessage
                       """
                        
                    }
            
                }
        }
    }
    post {
        success {
            script {
                    withCredentials ([string (credentialsId : 'SLACK_TOKEN' , variable : 'SLACK_ID')]) {
                        sh """
                       curl -X POST \
                       -H 'Authorization: Bearer ${SLACK_ID}' \
                       -H 'Content-Type: application/json' \
                       --data '{"channel": "devops-masterclass-2024" , "text" : "Build, succeeded"}' \
                       https://slack.com//api/chat.postMessage
                       """
                        
                    }
            
                }
        }
    }

     
            
            
}
   
